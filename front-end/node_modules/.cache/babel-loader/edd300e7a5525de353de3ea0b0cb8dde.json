{"ast":null,"code":"var _jsxFileName = \"/Users/jackierauhut/Documents/Web dev stuff/weather-app/src/components/Forcast/Forcast.js\";\nimport React, { Fragment } from \"react\";\nimport tempConverter from \"../../util\";\nimport \"./Forcast.css\";\n\nconst Forcast = ({\n  forcastData,\n  isCelsius\n}) => {\n  const dateOptions = {\n    weekday: \"short\"\n  };\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }, \"Forcast\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"forcast center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }, forcastData.map(day => {\n    let date = new Date(day.dt * 1000);\n    let weekday = Intl.DateTimeFormat(\"en-US\", dateOptions).format(date);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forcast-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 15\n      }\n    }, weekday), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forcast-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }\n    }, day.weather[0].main)), /*#__PURE__*/React.createElement(\"img\", {\n      src: require(`../../weather-icons/Clear.svg`),\n      alt: `Image for ${day.weather[0].main}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forcast-temp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }, tempConverter(isCelsius, day.temp.day), \"\\xB0\")), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }\n    }, \"Feels Like: \", tempConverter(isCelsius, day.feels_like.day), \"\\xB0\"), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }\n    }, \"Humidity: \", day.humidity, \"%\"), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }\n    }, \"Min: \", tempConverter(isCelsius, day.temp.min), \"\\xB0\"), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }\n    }, \"Max: \", tempConverter(isCelsius, day.temp.max), \"\\xB0\"), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, \"Pressure: \", day.pressure, \"hPa\"));\n  })));\n};\n\nexport default Forcast;","map":{"version":3,"sources":["/Users/jackierauhut/Documents/Web dev stuff/weather-app/src/components/Forcast/Forcast.js"],"names":["React","Fragment","tempConverter","Forcast","forcastData","isCelsius","dateOptions","weekday","map","day","date","Date","dt","Intl","DateTimeFormat","format","weather","main","require","temp","feels_like","humidity","min","max","pressure"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,YAA1B;AACA,OAAO,eAAP;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAgC;AAC9C,QAAMC,WAAW,GAAG;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAApB;AACA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,WAAW,CAACI,GAAZ,CAAiBC,GAAD,IAAS;AACxB,QAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,GAAG,CAACG,EAAJ,GAAS,IAAlB,CAAX;AACA,QAAIL,OAAO,GAAGM,IAAI,CAACC,cAAL,CAAoB,OAApB,EAA6BR,WAA7B,EAA0CS,MAA1C,CAAiDL,IAAjD,CAAd;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,OAAL,CADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKE,GAAG,CAACO,OAAJ,CAAY,CAAZ,EAAeC,IAApB,CADF,CAFF,eAKE;AACE,MAAA,GAAG,EAAEC,OAAO,CAAE,+BAAF,CADd;AAEE,MAAA,GAAG,EAAG,aAAYT,GAAG,CAACO,OAAJ,CAAY,CAAZ,EAAeC,IAAK,EAFxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eASE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKf,aAAa,CAACG,SAAD,EAAYI,GAAG,CAACU,IAAJ,CAASV,GAArB,CAAlB,SADF,CATF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACeP,aAAa,CAACG,SAAD,EAAYI,GAAG,CAACW,UAAJ,CAAeX,GAA3B,CAD5B,SAZF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAeA,GAAG,CAACY,QAAnB,MAfF,eAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAUnB,aAAa,CAACG,SAAD,EAAYI,GAAG,CAACU,IAAJ,CAASG,GAArB,CAAvB,SAhBF,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAUpB,aAAa,CAACG,SAAD,EAAYI,GAAG,CAACU,IAAJ,CAASI,GAArB,CAAvB,SAjBF,eAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAed,GAAG,CAACe,QAAnB,QAlBF,CADF;AAsBD,GAzBA,CADH,CAFF,CADF;AAiCD,CAnCD;;AAqCA,eAAerB,OAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport tempConverter from \"../../util\";\nimport \"./Forcast.css\";\n\nconst Forcast = ({ forcastData, isCelsius }) => {\n  const dateOptions = { weekday: \"short\" };\n  return (\n    <Fragment>\n      <h1 className=\"center\">Forcast</h1>\n      <div className=\"forcast center\">\n        {forcastData.map((day) => {\n          let date = new Date(day.dt * 1000);\n          let weekday = Intl.DateTimeFormat(\"en-US\", dateOptions).format(date);\n          return (\n            <div className=\"forcast-card\">\n              <h1>{weekday}</h1>\n              <div className=\"forcast-main\">\n                <h3>{day.weather[0].main}</h3>\n              </div>\n              <img\n                src={require(`../../weather-icons/Clear.svg`)}\n                alt={`Image for ${day.weather[0].main}`}\n              ></img>\n              <div className=\"forcast-temp\">\n                <h2>{tempConverter(isCelsius, day.temp.day)}째</h2>\n              </div>\n              <h6>\n                Feels Like: {tempConverter(isCelsius, day.feels_like.day)}째\n              </h6>\n              <h6>Humidity: {day.humidity}%</h6>\n              <h6>Min: {tempConverter(isCelsius, day.temp.min)}째</h6>\n              <h6>Max: {tempConverter(isCelsius, day.temp.max)}째</h6>\n              <h6>Pressure: {day.pressure}hPa</h6>\n            </div>\n          );\n        })}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Forcast;\n"]},"metadata":{},"sourceType":"module"}