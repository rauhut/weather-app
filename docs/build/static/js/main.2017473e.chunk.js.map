{"version":3,"sources":["weather-icons sync /^/.//.*/.svg$","weather-icons/Atmosphere.svg","weather-icons/Clear.svg","weather-icons/Clouds.svg","weather-icons/Drizzle.svg","weather-icons/Rain.svg","weather-icons/Snow.svg","weather-icons/Thunderstorm.svg","util.js","components/CurrentWeather/CurrentWeather.js","components/SearchField/SearchField.js","components/UnitToggle/UnitToggle.js","components/Forcast/Forcast.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","tempConverter","isCelsius","temp","toFixed","CurrentWeather","weatherData","weatherType","weather","main","name","sys","country","className","src","require","weatherIcon","alt","description","humidity","feels_like","pressure","temp_max","temp_min","SearchField","onInputChange","onLocationSubmit","onEnter","locationEntry","onKeyPress","type","placeholder","onChange","onClick","disabled","UnitToggle","onToggleClick","htmlFor","Forcast","forcastData","dateOptions","weekday","day","date","Date","dt","Intl","DateTimeFormat","format","min","max","App","props","onRequestWeather","which","console","log","this","forcast","isValidlocation","length","Component","connect","state","searchInput","toggleTempUnit","getWeatherData","isValidLocation","isPending","error","dispatch","event","payload","target","value","fetch","method","header","then","res","ok","json","data","cod","coord","lat","lon","daily","catch","submitLocation","Boolean","window","location","hostname","match","initialStateSearch","initialStateTempUnit","initialStateWeatherData","logger","createLogger","rootReducer","combineReducers","action","assign","trim","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2017473e.chunk.js","sourcesContent":["var map = {\n\t\"./Atmosphere.svg\": 29,\n\t\"./Clear.svg\": 30,\n\t\"./Clouds.svg\": 31,\n\t\"./Drizzle.svg\": 32,\n\t\"./Rain.svg\": 33,\n\t\"./Snow.svg\": 34,\n\t\"./Thunderstorm.svg\": 35\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 9;","module.exports = __webpack_public_path__ + \"static/media/Atmosphere.1186186b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Clear.795a5585.svg\";","module.exports = __webpack_public_path__ + \"static/media/Clouds.2afee49d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Drizzle.728cc872.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rain.5380ecf9.svg\";","module.exports = __webpack_public_path__ + \"static/media/Snow.20ee1eab.svg\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm.4270c556.svg\";","export const tempConverter = (isCelsius, temp) => {\n  if (isCelsius) {\n    return (temp - 273.15).toFixed(1);\n  } else {\n    return ((9 / 5) * (temp - 273) + 32).toFixed(1);\n  }\n};\n\nexport const weatherIcon = (weatherType) => {\n  const uniqueIcons = [\n    \"Clear\",\n    \"Thunderstorm\",\n    \"Drizzle\",\n    \"Rain\",\n    \"Snow\",\n    \"Clouds\",\n  ];\n  const icon = uniqueIcons.includes(weatherType) ? weatherType : \"Atmosphere\";\n  return icon;\n};\n\nexport default { tempConverter, weatherIcon };\n","import React from \"react\";\nimport { tempConverter, weatherIcon } from \"../../util\";\nimport \"./CurrentWeather.css\";\n\nconst CurrentWeather = ({ weatherData, isCelsius }) => {\n  const weatherType = weatherData.weather[0].main;\n  return (\n    <div>\n      <center>\n        <h1>\n          Weather for {weatherData.name}, {weatherData.sys.country}\n        </h1>\n        <div className=\"card\">\n          <div className=\"weather-main\">\n            <div className=\"weather-type\">\n              <h3>{weatherType}</h3>\n              <img\n                src={require(`../../weather-icons/${weatherIcon(\n                  weatherType\n                )}.svg`)}\n                alt={`Image for ${weatherType}`}\n              ></img>\n              <h4>{weatherData.weather[0].description}</h4>\n            </div>\n            <div className=\"current-temp\">\n              <h2>{tempConverter(isCelsius, weatherData.main.temp)}°</h2>\n            </div>\n          </div>\n          <div className=\"weather-details\">\n            <h6>Humidity: {weatherData.main.humidity}%</h6>\n            <h6>\n              Feels Like:{\" \"}\n              {tempConverter(isCelsius, weatherData.main.feels_like)}°\n            </h6>\n            <h6>Pressure: {weatherData.main.pressure}hPa</h6>\n            <h6>Max: {tempConverter(isCelsius, weatherData.main.temp_max)}°</h6>\n            <h6>Min: {tempConverter(isCelsius, weatherData.main.temp_min)}°</h6>\n          </div>\n        </div>\n      </center>\n    </div>\n  );\n};\n\nexport default CurrentWeather;\n","import React from \"react\";\nimport \"./SearchField.css\";\n\nconst SearchField = ({\n  onInputChange,\n  onLocationSubmit,\n  onEnter,\n  locationEntry,\n}) => {\n  return (\n    <div className=\"search-field\" onKeyPress={onEnter}>\n      <input\n        type=\"text\"\n        placeholder=\"Search for location\"\n        onChange={onInputChange}\n      />\n      <button onClick={onLocationSubmit} disabled={locationEntry === \"\"}>\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport default SearchField;\n","import React from \"react\";\nimport \"./UnitToggle.css\";\n\nconst UnitToggle = ({ onToggleClick }) => {\n  return (\n    <div className=\"unit-toggle\">\n      <h3>C°</h3>\n      <div className=\"toggle-switch\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle-switch-checkbox\"\n          name=\"toggleSwitch\"\n          id=\"toggleSwitch\"\n          onClick={onToggleClick}\n        />\n        <label className=\"toggle-switch-label\" htmlFor=\"toggleSwitch\">\n          <span className=\"toggle-switch-inner\" />\n          <span className=\"toggle-switch-switch\" />\n        </label>\n      </div>\n      <h3>F°</h3>\n    </div>\n  );\n};\n\nexport default UnitToggle;\n","import React, { Fragment } from \"react\";\nimport { tempConverter, weatherIcon } from \"../../util\";\nimport \"./Forcast.css\";\n\nconst Forcast = ({ forcastData, isCelsius }) => {\n  const dateOptions = { weekday: \"short\" };\n  return (\n    <Fragment>\n      <h1 className=\"center\">Forcast</h1>\n      <div className=\"forcast center\">\n        {forcastData.map((day) => {\n          let date = new Date(day.dt * 1000);\n          let weekday = Intl.DateTimeFormat(\"en-US\", dateOptions).format(date);\n          return (\n            <div className=\"forcast-card\">\n              <h1>{weekday}</h1>\n              <div className=\"forcast-main\">\n                <h3>{day.weather[0].main}</h3>\n              </div>\n              <img\n                src={require(`../../weather-icons/${weatherIcon(\n                  day.weather[0].main\n                )}.svg`)}\n                alt={`Image for ${day.weather[0].main}`}\n              ></img>\n              <div className=\"forcast-temp\">\n                <h2>{tempConverter(isCelsius, day.temp.day)}°</h2>\n              </div>\n              <div>\n                <h6>\n                  Feels Like: {tempConverter(isCelsius, day.feels_like.day)}°\n                </h6>\n                <h6>Humidity: {day.humidity}%</h6>\n                <h6>Min: {tempConverter(isCelsius, day.temp.min)}°</h6>\n                <h6>Max: {tempConverter(isCelsius, day.temp.max)}°</h6>\n                <h6>Pressure: {day.pressure}hPa</h6>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Forcast;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport CurrentWeather from \"./components/CurrentWeather/CurrentWeather\";\nimport SearchField from \"./components/SearchField/SearchField\";\nimport UnitToggle from \"./components/UnitToggle/UnitToggle\";\nimport Forcast from \"./components/Forcast/Forcast\";\nimport \"./App.css\";\nimport { setSearchField, setIsCelsius, submitLocation } from \"./actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    locationEntry: state.searchInput.locationEntry,\n    isCelsius: state.toggleTempUnit.isCelsius,\n    weatherData: state.getWeatherData.weatherData,\n    forcast: state.getWeatherData.forcast,\n    isValidlocation: state.getWeatherData.isValidLocation,\n    isPending: state.getWeatherData.isPending,\n    error: state.getWeatherData.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onInputChange: (event) => dispatch(setSearchField(event.target.value)),\n    onToggleClick: () => dispatch(setIsCelsius()),\n    onRequestWeather: (locationEntry) =>\n      dispatch(submitLocation(locationEntry)),\n  };\n};\n\nclass App extends Component {\n  onLocationSubmit = () => {\n    this.props.onRequestWeather(this.props.locationEntry);\n  };\n\n  onEnter = (e) => {\n    if (e.which === 13 && this.props.locationEntry !== \"\") {\n      this.onLocationSubmit();\n    }\n  };\n\n  render() {\n    console.log(this.props);\n    const {\n      locationEntry,\n      onInputChange,\n      isCelsius,\n      onToggleClick,\n      weatherData,\n      forcast,\n      isValidlocation,\n    } = this.props;\n    return (\n      <div className=\"background\">\n        {Object.keys(weatherData).length === 0 && isValidlocation ? (\n          <div className=\"empty-state\">\n            <h1>Enter a location to see the weather forcast</h1>\n            <SearchField\n              onInputChange={onInputChange}\n              onLocationSubmit={this.onLocationSubmit}\n              onEnter={this.onEnter}\n              locationEntry={locationEntry}\n            />\n          </div>\n        ) : (\n          <Fragment>\n            <div className=\"nav-bar\">\n              <div className=\"search-bar\">\n                <SearchField\n                  onInputChange={onInputChange}\n                  onLocationSubmit={this.onLocationSubmit}\n                  onEnter={this.onEnter}\n                  locationEntry={locationEntry}\n                />\n              </div>\n              <UnitToggle onToggleClick={onToggleClick} />\n            </div>\n            {isValidlocation ? (\n              <div className=\"weather-container\">\n                <CurrentWeather\n                  weatherData={weatherData}\n                  isCelsius={isCelsius}\n                />\n                <Forcast forcastData={forcast} isCelsius={isCelsius} />\n              </div>\n            ) : (\n              <div className=\"empty-state\">\n                <h1>Unable to find that location</h1>\n              </div>\n            )}\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  TOGGLE_TEMP_UNIT,\n  REQUEST_WEATHER_PENDING,\n  REQUEST_WEATHER_SUCCESS,\n  REQUEST_WEATHER_FAILED,\n  REQUEST_FORCAST_PENDING,\n  REQUEST_FORCAST_SUCCESS,\n  REQUEST_FORCAST_FAILED,\n  LOCATION_IS_VALID,\n  LOCATION_IS_INVALID,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const setIsCelsius = () => ({\n  type: TOGGLE_TEMP_UNIT,\n});\n\nexport const submitLocation = (locationEntry) => (dispatch) => {\n  dispatch({ type: REQUEST_WEATHER_PENDING });\n  fetch(\n    `https://sleepy-caverns-12468.herokuapp.com/weather?locationEntry=${locationEntry}`,\n    {\n      method: \"get\",\n      header: { \"Content-Type\": \"application/json\" },\n    }\n  )\n    .then((res) => {\n      if (res.ok) {\n        dispatch({ type: LOCATION_IS_VALID });\n        return res.json().then((data) => {\n          if (data.cod === \"404\") {\n            dispatch({ type: LOCATION_IS_INVALID });\n          } else {\n            dispatch({ type: REQUEST_WEATHER_SUCCESS, payload: data });\n            dispatch({ type: REQUEST_FORCAST_PENDING });\n            return fetch(\n              `https://sleepy-caverns-12468.herokuapp.com/forcast?lat=${data.coord.lat}&lon=${data.coord.lon}`,\n              {\n                method: \"get\",\n                header: { \"Content-Type\": \"application/json\" },\n              }\n            )\n              .then((res) => res.json())\n              .then((data) => {\n                dispatch({\n                  type: REQUEST_FORCAST_SUCCESS,\n                  payload: data.daily,\n                });\n              })\n              .catch((error) =>\n                dispatch({ type: REQUEST_FORCAST_FAILED, payload: error })\n              );\n          }\n        });\n      } else {\n        dispatch({ type: LOCATION_IS_INVALID });\n      }\n    })\n    .catch((error) =>\n      dispatch({ type: REQUEST_WEATHER_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const TOGGLE_TEMP_UNIT = \"TOGGLE_TEMP_UNIT\";\nexport const REQUEST_WEATHER_PENDING = \"REQUEST_WEATHER_PENDING\";\nexport const REQUEST_WEATHER_SUCCESS = \"REQUEST_WEATHER_SUCCESS\";\nexport const REQUEST_WEATHER_FAILED = \"REQUEST_WEATHER_FAILED\";\nexport const REQUEST_FORCAST_PENDING = \"REQUEST_FORCAST_PENDING\";\nexport const REQUEST_FORCAST_SUCCESS = \"REQUEST_FORCAST_SUCCESS\";\nexport const REQUEST_FORCAST_FAILED = \"REQUEST_FORCAST_FAILED\";\nexport const LOCATION_IS_VALID = \"LOCATION_IS_VALID\";\nexport const LOCATION_IS_INVALID = \"LOCATION_IS_INVALID\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  TOGGLE_TEMP_UNIT,\n  REQUEST_WEATHER_PENDING,\n  REQUEST_WEATHER_SUCCESS,\n  REQUEST_WEATHER_FAILED,\n  REQUEST_FORCAST_PENDING,\n  REQUEST_FORCAST_SUCCESS,\n  REQUEST_FORCAST_FAILED,\n  LOCATION_IS_VALID,\n  LOCATION_IS_INVALID,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  locationEntry: \"\",\n};\n\nexport const searchInput = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { locationEntry: action.payload.trim() });\n    default:\n      return state;\n  }\n};\n\nconst initialStateTempUnit = {\n  isCelsius: true,\n};\n\nexport const toggleTempUnit = (state = initialStateTempUnit, action = {}) => {\n  switch (action.type) {\n    case TOGGLE_TEMP_UNIT:\n      return Object.assign({}, state, { isCelsius: !state.isCelsius });\n    default:\n      return state;\n  }\n};\n\nconst initialStateWeatherData = {\n  isValidLocation: true,\n  weatherData: {},\n  forcast: [],\n  isPending: false,\n  error: \"\",\n};\n\nexport const getWeatherData = (\n  state = initialStateWeatherData,\n  action = {}\n) => {\n  switch (action.type) {\n    case LOCATION_IS_INVALID:\n      return Object.assign({}, state, { isValidLocation: false });\n    case LOCATION_IS_VALID:\n      return Object.assign({}, state, { isValidLocation: true });\n    case REQUEST_WEATHER_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_WEATHER_SUCCESS:\n      return Object.assign({}, state, {\n        weatherData: action.payload,\n        isPending: false,\n      });\n    case REQUEST_WEATHER_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    case REQUEST_FORCAST_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_FORCAST_SUCCESS:\n      return Object.assign({}, state, {\n        forcast: action.payload,\n        isPending: false,\n      });\n    case REQUEST_FORCAST_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { combineReducers, applyMiddleware, createStore } from \"redux\";\nimport { searchInput, toggleTempUnit, getWeatherData } from \"./reducers\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({\n  searchInput,\n  toggleTempUnit,\n  getWeatherData,\n});\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}